# Docker Compose for Production Deployment
version: '3.8'

services:
  # Main Web Application
  web:
    build: 
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "80:8000"
    environment:
      - DATABASE_URL=postgresql://user:pass@db:5432/urldetector
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    depends_on:
      - db
      - redis
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - app-network

  # PostgreSQL Database  
  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=urldetector
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - app-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - app-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network

  # ML Model Service (Separate Container)
  ml-service:
    build:
      context: .
      dockerfile: Dockerfile.ml
    environment:
      - MODEL_PATH=/app/models
    volumes:
      - ./models:/app/models
    networks:
      - app-network
    restart: unless-stopped

  # Background Tasks (Celery)
  worker:
    build: .
    command: celery -A app.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://user:pass@db:5432/urldetector
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Task Scheduler (Celery Beat)  
  scheduler:
    build: .
    command: celery -A app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://user:pass@db:5432/urldetector
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge

# Kubernetes Deployment Options:
# - Use Helm charts for easy deployment
# - Horizontal Pod Autoscaling
# - Rolling updates with zero downtime
# - Service mesh with Istio
# - Monitoring with Jaeger tracing

# Cloud Deployment Platforms:
# 1. AWS EKS + RDS + ElastiCache
# 2. Google Cloud Run + Cloud SQL
# 3. Azure Container Instances + CosmosDB
# 4. DigitalOcean Kubernetes + Managed Database